Q1:
What happens for case 0011/1100 when two of the tetrahedronâ€™s vertex
values are equal to the iso-value of interest and the other two are greater
than the iso-value? Is this a bad thing? Hint: think of the kind of output
generated in this case.

Answer: If we use linear interpolation and the two 11 (or 00) points have a value equal to
the iso value, then the quad turns into a line (two points will coincide in one vertex twice).
is this a bad thing?

Q2:
We render the isosurface two-sided here, that is, without back-face culling.
If the isosurface forms a closed surface, there would be no need for this,
as the inside/back-side of the surface would never be visible. For what
situation does marching tetrahedra not produce a closed isosurface?

Answer: The case in which the object to be modelled touches the sides of the 3D 
cell grid (in other words, when there are not enough cells to pad the object with). 

Q3:
What optimizations to the marching tetrahedra algorithm as described in
Section 2.2 can you think of? Are there computations that are performed
redundantly? Is there an opportunity for parallel processing?

Answer: computations that are performed redundantly are for example the 
c.value[index] > isovalue operations. If you imagine a 2x2x2 cube consisting 
of 8 cells, then the center vertex of this cube is recomputed 8 times. 
Also, cells and tetrahedra within cells can be evaluated in parallel (in theory).
